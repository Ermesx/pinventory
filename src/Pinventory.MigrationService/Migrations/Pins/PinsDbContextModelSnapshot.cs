// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pinventory.Pins.Infrastructure;

#nullable disable

namespace Pinventory.MigrationService.Migrations.Pins
{
    [DbContext(typeof(PinsDbContext))]
    partial class PinsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("pins")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pinventory.Pins.Domain.Domain.Places.Pin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StatusUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "Pinventory.Pins.Domain.Domain.Places.Pin.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Line")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Address");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Location", "Pinventory.Pins.Domain.Domain.Places.Pin.Location#Location", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("Longitude");
                        });

                    b.HasKey("Id");

                    b.HasIndex("PlaceId")
                        .IsUnique();

                    b.ToTable("Pins", "pins");
                });

            modelBuilder.Entity("Pinventory.Pins.Domain.Domain.Tagging.TagCatalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TagCatalogs", "pins");
                });

            modelBuilder.Entity("Pinventory.Pins.Domain.Domain.Places.Pin", b =>
                {
                    b.OwnsMany("Pinventory.Pins.Domain.Domain.Tag", "Tags", b1 =>
                        {
                            b1.Property<Guid>("PinId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("Value");

                            b1.HasKey("PinId", "Value");

                            b1.HasIndex("Value");

                            b1.ToTable("PinTags", "pins");

                            b1.WithOwner()
                                .HasForeignKey("PinId");
                        });

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Pinventory.Pins.Domain.Domain.Tagging.TagCatalog", b =>
                {
                    b.OwnsMany("Pinventory.Pins.Domain.Domain.Tag", "Tags", b1 =>
                        {
                            b1.Property<Guid>("CatalogId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("Value");

                            b1.HasKey("CatalogId", "Value");

                            b1.HasIndex("Value");

                            b1.ToTable("CatalogTags", "pins");

                            b1.WithOwner()
                                .HasForeignKey("CatalogId");
                        });

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
