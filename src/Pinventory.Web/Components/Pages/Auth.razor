@page "/auth"
@using Microsoft.AspNetCore.Authorization
@using Pinventory.Identity.Tokens
@inject TokenService TokenService

@attribute [Authorize]

<PageTitle>Auth</PageTitle>

<h1>You are authenticated</h1>

@if (accessToken is null)
{
    <p>No tokens (not authenticated or no SaveTokens).</p>
}
else
{
    <p><b>Token type</b>: @tokenType</p>
    <p><b>Id token</b>: @idToken</p>
    <p><b>Access token</b>: @accessToken</p>
    <p><b>Refresh token</b>: @refreshToken</p>
    <p><b>Expires at</b>: @expiresAt</p>
}

<AuthorizeView>
    Hello @context.User.Identity?.Name!
</AuthorizeView>


@code {
    private string? idToken;
    private string? accessToken;
    private string? tokenType;
    private DateTimeOffset? expiresAt;
    private string? refreshToken;
    
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var tokens = await TokenService.GetGoogleTokensAsync(authState.User);
        if (tokens is not null)
        {
            tokenType = tokens.AccessToken.TokenType;
            idToken = tokens.IdToken.Token;
            accessToken = tokens.AccessToken.Token;
            expiresAt = tokens.AccessToken.ExpiresAt;
            refreshToken = tokens.RefreshToken.Token;
        }
    }

}